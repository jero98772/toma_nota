* lenguajes
** temas
*** historoia
*** grmatica
**** arboles de parser
*** asembler, jcoco
*** poo
**** java y c++
**** linkeo dinamico
**** garbage colector
**** hilos
**** pytoken
**** jcoco en profundidad
*** funcional
**** haskell
**** calculo lambda
*** programacion logica
** evaluaciones
*** proyecto 1 10 septiembre
**** lista enlacadas en c++
*** proyecto 2 y 3
**** haskell,javascript, f#
12 de octubre y 13 de noviembre 
** parciales
*** semana 4 12 agosto
** backus naur form
metalenguaje "formal" usado para describir la sintaxis de un lenguaje

simbolos terminales en una gramatica no tienen el < y >
<digito> ::= 1|2|3|4|5|6|7|8|9
<numero> ::= digito+

gramatica libre de contexto
G=(n,t,p,s)

n conjunto de simbolos no terminales
t conjunto de simbolos terminales
p conjuntos producciones de la forma n-> a donde
nEN y aE{N U T}*

s no terminal especial que 
(-> no significa entonces se le dice derviva en..)

G=(n,t,p,e)
N={e,t,f}
t={identifcador,numero,+,-,*,/,(,)}
p es el siguente conhunto de producciones
E->E+T|E-T|T
T->T*F|T/F|F
F->(E)|identificador|numeros

E=> E-T =>E+T-T
T+T-T->F+T-T->2+T-T
**** el de clase
E=>T
->F
->(E)
(E)->(E-T)
->(T-T)
->(F-T)
->((E)-T)
->((T)-T)
->((T*F)-T)
->((T*3)-T)

*** parsing
determinar si un conjunto de tokens es una sentencia valida en una gramatica

proceso de parser

archivo fuente -> parser ->AST (arbol de sintaxis abtrapta) -> genrador codigo -> asembler

*** parsers

**** top down
escritos a manos, alguien los dise√±o

parsers recursivos decendientes, se parte desde un simbolo inicial, los simbolos se vuelven funciones

derivacion por la izquierda , se recorre por la izquierda

tipo especial de gramatica

left to rigth , left derivation con solo leer un token se sabe cual produccion de la gramatica elegit

** c++

compilacion

#include <loquesea>
c++ asume con <> que lo que vaya incluido fue descargado por la libreria estandar de c++ , y debes poner flags en compilacion especiales para eso

#include <"loquesea">

c++ asume con <""> que tu creaste el archivo y debes poner flags en compilacion 


* tareas
implemental lista enlacasda c++

maximo  4 parrafos
leea historical perspective
la evolucion historia de los lenguajes de programacion

definir un numero negativo con regex
