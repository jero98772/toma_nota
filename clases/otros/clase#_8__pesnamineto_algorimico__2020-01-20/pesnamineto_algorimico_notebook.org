*  20-1-2020
** info del area
** pertenece a la uoc
** que van a evaluar
*** 2 segumientos con
**** quiz 8%
**** trabajo  10%
**** participacion 7%
***** hacer ejercios
*** parcial y final
**** 25%/2 
***** practica:una semana antes de los examamenes
***** teoria
** modulos
*** 1 coceptos basicos 
*** 2 herramientas ->data types y operadores
*** 3 estructuras -> estructuras de control if else elif , for while
*** 4 codigo modular -> no Poo (progrmacion oreintada a objetos en segundo semestre)
*** 5 arrays
** enseñansas 
*** cuando uno reconose que no sabe aprende mas 
** clase del juves en el centro docente de computo
** entregar trabajos sin terminar es mejor que entrgarlos terminados
* 21-1-2020 
** modulo 2 herramientas lo que yo estudie y entiendo sobre esas "herramientas" son data types y operadores
*** datatypes
**** boleano mejor conosido como verdadero o faslo o True o False 
**** entero mejor conosido como int o numeros negativos y positivos
**** float o flotante mejor conosido como float o las divicones no enteras o los numeros con punto
**** otras bases :0b<numero> binaro ,0x<numero>  hexadecimal  y 0o<numero> octal
**** imaginaros y complejos o mejor conosido como los raiz cuadrada de -1 o -1**(1/2) o sqrt(-1)  o error de calculo en algunas calculadoras
**** cadena de texto o mejor conosido string o los que van entre "<tu cadena de texto :) >"  
**** para conevrtir datos a enteros se puede utilisar int(<numero>)
**** para convertir datos a boleanos se puede utilisar bool(<valor boleano (1,0 o True,False)>)
**** para convertir datos a float se puede utilisar float(<numero>) 
**** para convertir datos a otras bases bin(<numero>) a binario, hex(<numero>) a hexadecimal ,oct(<numero>) a octal  
**** para convertir datos a datos complejos complex(<numero>) 
**** para convertir datos a cadenas de texto str(<cualquier dato>)
* calse 23-1-2020
** hacer un dibujo y hacer las instrucciones de como se hace
** un algorimo no puede ser anmbigio que se presta para varias intruccuiones
** UN COMPUTADOR NO TIENE IDEAS PRECONSEDIDAS
** lengujae de programacion es un sub conjunto de un lenguje natural
** conceptos basicos
* "primero resuleve el problema luego escribe codigo" john johnson
** serie finita y logica de pasos
** sirve para resolver un problema
** caracteristicas 
*** presiso
*** claro
*** no prestarse para anbiguedades
*** definido 
**** debe ser el mismo  resultado
*** finito
*** 3 pasos 
**** entrada
**** salida
**** proseso
*** eficiente
**** se puede ver en los metodos de ordenamientos 
**** caractersitica deseabele
*** legible
**** en el codigo debe ser legible para subir a internet es una buena practica 
*** difernecia de algorimo de metodos ordenamineto burbuja merch sort
*** las  partes de un algoritmo
**** entrada 
**** proseso el algoritmo
**** salida
*** como se puede representar
**** lengueje natural 
**** pseudocodigo
*****  nombre algorimo 
***** variables 
***** proseso
**** diagramas de flujo
*****  no se usa
***** tambien se puede represntar en python en e cruso
**** algorimo que no ea nesario aplicarlo a un computadoe
**** programa
***** es un conjunto de algoritmo
***** escrito en un lenguje
***** para una platarma determinada donde se va ejecutar
*** primero algoritmo luego programa
***  compilacion
****  maneja codigo maquina
**** compilado crea otros archivos
*** interpretado
**** que va corriendo en caliente mientras ustedd va escribiendo
**** python  es interpretado
*** programar es trasversal
*** se aplican los diferentes lenguajes de programacion el curso
*** para usuario
**** la usuabiliad tarta de disminuir la fustracion del usuario
*** para programador
**** clariad en las variables legible 
**** abierto
**** solucion para el programador
**** documentacion
*** hacerlo mas adecuada para que funcione
*** ciclo de vida de un programdor y los que se van a tranbajar con *
**** analisis *
**** diesño del algoritmo *
**** implementacion *
**** verificacion y validacion *
**** doocumentacion
***** para el usuario y programador
**** despliege(poner en marcha)
**** mantenimeinto
* Penamiento algoritmico:
* clase del 27-1-2020
* herramientas
** un computador tiene entradas y salidas i/o y una memoria
*** se almacena en la memoria como registros y pueden  ocupar
*** data type
**** enteros
***** byte 8
***** short 16
***** int 32
***** Long 64
**** flotantes
***** float
***** double
**** logicos
***** True verdadero 1
***** False falso 0
**** alfanumericos
***** string 
*****  char
**** se van atrabajar con arrays
***** vectores 
***** matrises
**** objetos
***** elememto completo
** python es un lenguaje tipado que dice que tipo de dato es
** identificadores
*** es la forma de nombrar una variable  e identificar los datos en un programa 
*** mejor conosido como el nombre de una varible o consatante
*** secuencias de caracteres que identifican una posion en memoria
*** debe tener 
**** nombre que empiese por una letra  
**** no tener espacios
*** tipos de identificador
**** variable
***** varia el valor el contenido
**** constante
***** que no cambia el contenido
*** clases de variables
**** contenido
***** numerica 
***** logica
***** caracter
**** uso
***** contadoras (cuanta de uno en un 1)
***** acumuladora (es como la contadora)
***** interruptor
****** logico
****** multiples valores
***** centinela (es una variable que sirve como señal)
** operadores escritos desde python  pseudo codigo
*** arimeticos
**** python y pseudo codigo: significado
**** + suma o conquatenacion
**** - resta 
**** * multiplicacion o sirve para repetir un string varias veces
**** / division
**** // o DIV division entera 
**** ** o ^ potenciacion
**** % o MOD resto o modulo
*** relacionales
**** < menor que
**** <= menor o igual que
**** > mayor que  
**** >= operador de asigancion
**** != o <> diferente 
**** == comparacion
*** logicos
**** AND y
**** OR o
**** XOR o exclusivo (no se ve casi)
**** NOT no
*** asigancion
**** = asigancion
*** incremento y decremento
**** ++ incremento no hay en python pero se puede x=x+1
**** -- decremento no hay en python pero se puede x=x-1
** expresiones
*** expresiones de operadores y operandos se usan para expresar aspectos del problema a solucionar
*** tipos de expresiones
**** arimeticas
**** logicas 
**** relacionales
*** se puede 
**** utilisar parenetesis a para mayor claridad ()
**** puede incluir funciones
*** preferencia de operadores del computador se usa 
**** primero
***** ()
**** segundo
***** ** 
*****  ^
**** tercero
***** * / MOD DIV NOT 
***** * / % // NOT
**** cuarto 
***** + - AND
**** quinto
***** < > <= >=
**** sexto 
***** != == OR
* python es intepretado
** python en python.org
** 2 y 3
** python viene con un ide
** en un consola
** gurdar con .py
** las palabras reservadas son de otro color
** spyder anaconda no es excusa
*** se puede usar el segumineto de variables de spider llamdo "explorador de varibles"
*** si no tiene  internet  puede utilisar  https://www.onlinegdb.com/online_python_interpreter
*** pseudo codigo es  un subconjunto de lengaje natural
*** si hay algo como un no invirte todo lo que hay dentro del parete 
* las estructuras de progrmacion son
** secuancial
*** serie de acciones consecutivas que esttablecen el flujo del progrma
**** declarracion de varibles
**** inisialisacion de variables
**** lectura de de datos
**** salida de datos
*** partes de un algoritmo
**** entrada 
**** proseso o calculo
**** salida
*** forma de un codigo
**** varibales
***** inisialisacion de variables
***** declarracion de varibles
***** lectura de de datos(tipo de datos)
***** cunado se ingresa un dato es mejor decirele que dato debe ingresar
**** inicio
***** operaciones y prosesos
**** salida de datos
***** mostar que se hiso con los datos en pantalla
*** se lee de abajo hacia arriba la serie de intruciones 
** condicionales
*** condicion logica 
**** esta formada por una dsion logica llamada condicion la cual 2 retorna 2 posbles valores
***** verdera  o falso
**** si , if{
**** se ejecuta si la condicion es verdera
**** finsi, }
**** si no se ejecuta la condicion es retorno valor falso
**** sino , esle{
**** si se ejcuyta si o if cumple lo contrario}
** repetitivas
